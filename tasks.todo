Redux:
  ☐ more reading to cement
    - https://github.com/tsingson/redux-async-learning
    - https://github.com/jasonslyvia/react-redux-async-example
    - https://github.com/rackt/redux/pull/166
    - https://github.com/rackt/redux/issues/113#issuecomment-114049804

  ☐ setup re-base
    - replace local database call with Firebase call -> add mock data to FB with associations
    - use syncState with Redux state reducers to update state and sync with DB

Modules:
  ☐ CRUD User (email/password w/Firebase Auth) -> https://www.firebase.com/docs/web/guide/login/password.html [LoginContainer:19]
  ☐ CRUD Counter [type, timestamp, £value, icon]

Server/Database alternative:
  - Relay/GraphQL ->  https://facebook.github.io/relay/
  - or Falcor -> http://netflix.github.io/falcor/
  - Mongo/Mongoose DB?
  - Universal/Isomporphic app w/server-side rendering

Resources:
  - awesome-redux https://github.com/xgrommx/awesome-redux
  - react-router https://github.com/rackt/react-router/tree/master
  - reselect https://github.com/faassen/reselect
  - react cheatsheet http://ricostacruz.com/cheatsheets/react.html

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Archive:
  ✔ expand action/counter.js -> shouldFetch etc @done(2015-09-04 15:31) @project(Redux)
  ✔ document async data flow @done(2015-09-04 12:51) @project(Redux)
  ✔ refine data flow @done(2015-09-03 16:17) @project(Redux)
  ✔ flesh out data flow @done(2015-09-02 17:30) @project(Stack)
  ✔ tidy Gulp tasks/docs/packages @done(2015-08-19 16:56) @project(Stack)
  ✔ add react-router @done(2015-08-19 16:27) @project(Stack)
  ✔ setup redux app structure @done(2015-08-19 12:04) @project(Stack)
  ✔ flip over to ES6 -> re-write React Components as ES6 classes @done(2015-08-18 16:39) @project(Stack)
  ✔ data flow - http://facebook.github.io/react/docs/multiple-components.html @done(2015-08-17 17:50) @project(Read)
  ✔ http://facebook.github.io/react/docs/thinking-in-react.html @done(2015-08-17 17:48) @project(Read)
  ✔ ReactFire @done(2015-07-29 17:32) @project(Tooling)
  ✔ Router @done(2015-07-29 17:05) @project(Tooling)


state: {
  currentUser: '',
  entities: {
    <full database>
  },
  countersByUser: {
    // where key is user.id
    0: {
      isFetching: false,
      didInvalidate: false,
      lastUpdated: 1439478405547,
      // where items is array of counter.ids
      items: [0, 1]
    }
  }
}

database: {
  counters: {
    0: {
      id: 0,
      title: '',
      value: 0,
      owner: 0
    },
    ...
  },
  users: {
    0: {
      id: 0,
      name: ''
    }
  }
}
